"use client";

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useToast } from '@/hooks/use-toast';
import { 
  Copy, 
  Check, 
  Clock, 
  Building2, 
  Bitcoin, 
  QrCode,
  RefreshCw,
  AlertCircle,
  CheckCircle
} from 'lucide-react';

interface PaymentInstructionsProps {
  paymentData: {
    method: string;
    transactionId: string;
    amount: number;
    status: string;
    transferInfo?: any;
    cryptoInfo?: any;
  };
  onStatusChange?: (status: string) => void;
}

const PaymentInstructions: React.FC<PaymentInstructionsProps> = ({
  paymentData,
  onStatusChange
}) => {
  const [copiedField, setCopiedField] = useState<string>('');
  const [currentStatus, setCurrentStatus] = useState(paymentData.status);
  const [isCheckingStatus, setIsCheckingStatus] = useState(false);
  const { toast } = useToast();

  console.log("PaymentInstructions rendered", { paymentData, currentStatus });

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('vi-VN').format(price) + 'ƒë';
  };

  const copyToClipboard = async (text: string, fieldName: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedField(fieldName);
      toast({
        title: "ƒê√£ sao ch√©p!",
        description: `${fieldName} ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o clipboard.`,
      });
      
      setTimeout(() => {
        setCopiedField('');
      }, 2000);
    } catch (error) {
      console.error('Failed to copy:', error);
      toast({
        title: "L·ªói sao ch√©p",
        description: "Kh√¥ng th·ªÉ sao ch√©p. Vui l√≤ng th·ª≠ l·∫°i.",
        variant: "destructive",
      });
    }
  };

  const checkPaymentStatus = async () => {
    setIsCheckingStatus(true);
    console.log("Checking payment status", { transactionId: paymentData.transactionId, method: paymentData.method });

    try {
      const response = await fetch(`/api/payments?transactionId=${paymentData.transactionId}&method=${paymentData.method}`);
      const result = await response.json();
      
      if (result.success) {
        const newStatus = result.data.status;
        console.log("Payment status updated", { oldStatus: currentStatus, newStatus });
        
        setCurrentStatus(newStatus);
        
        if (onStatusChange) {
          onStatusChange(newStatus);
        }
        
        if (newStatus === 'completed' && currentStatus !== 'completed') {
          toast({
            title: "Thanh to√°n ƒë√£ x√°c nh·∫≠n! üéâ",
            description: "Giao d·ªãch c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng.",
          });
        }
      }
    } catch (error) {
      console.error("Error checking payment status:", error);
      toast({
        title: "L·ªói ki·ªÉm tra tr·∫°ng th√°i",
        description: "Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i thanh to√°n.",
        variant: "destructive",
      });
    } finally {
      setIsCheckingStatus(false);
    }
  };

  // Auto-check status for pending payments
  useEffect(() => {
    if (currentStatus === 'pending') {
      const interval = setInterval(() => {
        checkPaymentStatus();
      }, 30000); // Check every 30 seconds

      return () => clearInterval(interval);
    }
  }, [currentStatus]);

  const StatusBadge = () => {
    const statusConfig = {
      pending: { color: 'bg-yellow-100 text-yellow-800', icon: Clock, label: 'ƒêang ch·ªù' },
      completed: { color: 'bg-green-100 text-green-800', icon: CheckCircle, label: 'Ho√†n t·∫•t' },
      failed: { color: 'bg-red-100 text-red-800', icon: AlertCircle, label: 'Th·∫•t b·∫°i' }
    };

    const config = statusConfig[currentStatus as keyof typeof statusConfig] || statusConfig.pending;
    const IconComponent = config.icon;

    return (
      <Badge className={`${config.color} flex items-center space-x-1`}>
        <IconComponent className="w-3 h-3" />
        <span>{config.label}</span>
      </Badge>
    );
  };

  return (
    <div className="w-full max-w-2xl mx-auto space-y-6">
      {/* Status Header */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center space-x-2">
                {paymentData.method === 'banking' ? (
                  <Building2 className="w-5 h-5" />
                ) : (
                  <Bitcoin className="w-5 h-5" />
                )}
                <span>
                  {paymentData.method === 'banking' ? 'H∆∞·ªõng d·∫´n chuy·ªÉn kho·∫£n' : 'H∆∞·ªõng d·∫´n thanh to√°n Crypto'}
                </span>
              </CardTitle>
              <CardDescription>
                M√£ giao d·ªãch: {paymentData.transactionId}
              </CardDescription>
            </div>
            <div className="flex items-center space-x-2">
              <StatusBadge />
              <Button
                variant="outline"
                size="sm"
                onClick={checkPaymentStatus}
                disabled={isCheckingStatus}
              >
                {isCheckingStatus ? (
                  <RefreshCw className="w-4 h-4 animate-spin" />
                ) : (
                  <RefreshCw className="w-4 h-4" />
                )}
              </Button>
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* Banking Instructions */}
      {paymentData.method === 'banking' && paymentData.transferInfo && (
        <Card>
          <CardHeader>
            <CardTitle>Th√¥ng tin chuy·ªÉn kho·∫£n</CardTitle>
            <CardDescription>
              Vui l√≤ng chuy·ªÉn kho·∫£n ch√≠nh x√°c s·ªë ti·ªÅn v√† n·ªôi dung b√™n d∆∞·ªõi
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Alert>
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                <strong>Quan tr·ªçng:</strong> Chuy·ªÉn ƒë√∫ng s·ªë ti·ªÅn v√† n·ªôi dung ƒë·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω t·ª± ƒë·ªông
              </AlertDescription>
            </Alert>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-3">
                <div className="space-y-1">
                  <label className="text-sm font-medium text-gray-600">Ng√¢n h√†ng</label>
                  <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <span className="font-medium">{paymentData.transferInfo.bankName}</span>
                  </div>
                </div>

                <div className="space-y-1">
                  <label className="text-sm font-medium text-gray-600">S·ªë t√†i kho·∫£n</label>
                  <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <span className="font-mono">{paymentData.transferInfo.bankAccount}</span>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => copyToClipboard(paymentData.transferInfo.bankAccount, 'S·ªë t√†i kho·∫£n')}
                    >
                      {copiedField === 'S·ªë t√†i kho·∫£n' ? (
                        <Check className="w-4 h-4 text-green-600" />
                      ) : (
                        <Copy className="w-4 h-4" />
                      )}
                    </Button>
                  </div>
                </div>

                <div className="space-y-1">
                  <label className="text-sm font-medium text-gray-600">Ch·ªß t√†i kho·∫£n</label>
                  <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <span className="font-medium">{paymentData.transferInfo.accountHolder}</span>
                  </div>
                </div>
              </div>

              <div className="space-y-3">
                <div className="space-y-1">
                  <label className="text-sm font-medium text-gray-600">S·ªë ti·ªÅn chuy·ªÉn</label>
                  <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                    <span className="font-bold text-blue-700 text-lg">
                      {formatPrice(paymentData.transferInfo.transferAmount)}
                    </span>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => copyToClipboard(
                        paymentData.transferInfo.transferAmount.toString(), 
                        'S·ªë ti·ªÅn'
                      )}
                    >
                      {copiedField === 'S·ªë ti·ªÅn' ? (
                        <Check className="w-4 h-4 text-green-600" />
                      ) : (
                        <Copy className="w-4 h-4" />
                      )}
                    </Button>
                  </div>
                </div>

                <div className="space-y-1">
                  <label className="text-sm font-medium text-gray-600">N·ªôi dung chuy·ªÉn kho·∫£n</label>
                  <div className="flex items-center justify-between p-3 bg-yellow-50 rounded-lg">
                    <span className="font-mono text-yellow-800">
                      {paymentData.transferInfo.transferContent}
                    </span>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => copyToClipboard(
                        paymentData.transferInfo.transferContent, 
                        'N·ªôi dung'
                      )}
                    >
                      {copiedField === 'N·ªôi dung' ? (
                        <Check className="w-4 h-4 text-green-600" />
                      ) : (
                        <Copy className="w-4 h-4" />
                      )}
                    </Button>
                  </div>
                </div>

                <div className="space-y-1">
                  <label className="text-sm font-medium text-gray-600">M√£ tham chi·∫øu</label>
                  <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <span className="font-mono text-sm">{paymentData.transferInfo.referenceCode}</span>
                  </div>
                </div>
              </div>
            </div>

            <Separator />

            <div className="bg-blue-50 p-4 rounded-lg">
              <h4 className="font-medium text-blue-800 mb-2">L∆∞u √Ω quan tr·ªçng:</h4>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>‚Ä¢ Chuy·ªÉn ƒë√∫ng s·ªë ti·ªÅn: <strong>{formatPrice(paymentData.transferInfo.transferAmount)}</strong></li>
                <li>‚Ä¢ Ghi ƒë√∫ng n·ªôi dung: <strong>{paymentData.transferInfo.transferContent}</strong></li>
                <li>‚Ä¢ Giao d·ªãch s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong v√≤ng 5-15 ph√∫t</li>
                <li>‚Ä¢ Li√™n h·ªá h·ªó tr·ª£ n·∫øu kh√¥ng nh·∫≠n ƒë∆∞·ª£c t√†i kho·∫£n sau 30 ph√∫t</li>
              </ul>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Crypto Instructions */}
      {paymentData.method === 'crypto' && paymentData.cryptoInfo && (
        <Card>
          <CardHeader>
            <CardTitle>Th√¥ng tin thanh to√°n Crypto</CardTitle>
            <CardDescription>
              Chuy·ªÉn {paymentData.cryptoInfo.cryptoType} theo th√¥ng tin b√™n d∆∞·ªõi
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Alert>
              <Bitcoin className="h-4 w-4" />
              <AlertDescription>
                <strong>L∆∞u √Ω:</strong> Giao d·ªãch crypto c√≥ th·ªÉ m·∫•t 10-30 ph√∫t ƒë·ªÉ x√°c nh·∫≠n
              </AlertDescription>
            </Alert>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-3">
                <div className="space-y-1">
                  <label className="text-sm font-medium text-gray-600">ƒê·ªãa ch·ªâ nh·∫≠n</label>
                  <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <span className="font-mono text-sm break-all">
                      {paymentData.cryptoInfo.paymentAddress}
                    </span>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => copyToClipboard(
                        paymentData.cryptoInfo.paymentAddress, 
                        'ƒê·ªãa ch·ªâ v√≠'
                      )}
                    >
                      {copiedField === 'ƒê·ªãa ch·ªâ v√≠' ? (
                        <Check className="w-4 h-4 text-green-600" />
                      ) : (
                        <Copy className="w-4 h-4" />
                      )}
                    </Button>
                  </div>
                </div>

                <div className="space-y-1">
                  <label className="text-sm font-medium text-gray-600">S·ªë l∆∞·ª£ng c·∫ßn chuy·ªÉn</label>
                  <div className="flex items-center justify-between p-3 bg-orange-50 rounded-lg">
                    <span className="font-bold text-orange-700">
                      {paymentData.cryptoInfo.cryptoAmount} {paymentData.cryptoInfo.cryptoType}
                    </span>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => copyToClipboard(
                        paymentData.cryptoInfo.cryptoAmount, 
                        'S·ªë l∆∞·ª£ng'
                      )}
                    >
                      {copiedField === 'S·ªë l∆∞·ª£ng' ? (
                        <Check className="w-4 h-4 text-green-600" />
                      ) : (
                        <Copy className="w-4 h-4" />
                      )}
                    </Button>
                  </div>
                </div>

                <div className="space-y-1">
                  <label className="text-sm font-medium text-gray-600">M√£ tham chi·∫øu</label>
                  <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <span className="font-mono text-sm">{paymentData.cryptoInfo.referenceCode}</span>
                  </div>
                </div>
              </div>

              <div className="flex flex-col items-center justify-center space-y-3">
                <div className="w-32 h-32 bg-gray-100 rounded-lg flex items-center justify-center">
                  <QrCode className="w-16 h-16 text-gray-400" />
                </div>
                <p className="text-sm text-gray-500 text-center">
                  QR Code cho thanh to√°n nhanh
                </p>
                <Button variant="outline" size="sm">
                  <QrCode className="w-4 h-4 mr-2" />
                  Xem QR Code
                </Button>
              </div>
            </div>

            <Separator />

            <div className="bg-orange-50 p-4 rounded-lg">
              <h4 className="font-medium text-orange-800 mb-2">H∆∞·ªõng d·∫´n:</h4>
              <ul className="text-sm text-orange-700 space-y-1">
                <li>‚Ä¢ Chuy·ªÉn ƒë√∫ng s·ªë l∆∞·ª£ng: <strong>{paymentData.cryptoInfo.cryptoAmount} {paymentData.cryptoInfo.cryptoType}</strong></li>
                <li>‚Ä¢ ƒê·∫øn ƒë·ªãa ch·ªâ: <strong className="break-all">{paymentData.cryptoInfo.paymentAddress}</strong></li>
                <li>‚Ä¢ Giao d·ªãch c·∫ßn √≠t nh·∫•t 3 confirmations tr√™n blockchain</li>
                <li>‚Ä¢ Th·ªùi gian x·ª≠ l√Ω: 10-30 ph√∫t t√πy network congestion</li>
              </ul>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Status and Next Steps */}
      <Card>
        <CardContent className="pt-6">
          {currentStatus === 'pending' ? (
            <div className="text-center space-y-4">
              <Clock className="w-12 h-12 text-yellow-500 mx-auto" />
              <div>
                <h3 className="font-medium text-gray-900">ƒêang ch·ªù thanh to√°n</h3>
                <p className="text-sm text-gray-600 mt-1">
                  Ch√∫ng t√¥i s·∫Ω t·ª± ƒë·ªông x√°c nh·∫≠n khi nh·∫≠n ƒë∆∞·ª£c thanh to√°n
                </p>
              </div>
              <Button onClick={checkPaymentStatus} variant="outline" disabled={isCheckingStatus}>
                {isCheckingStatus ? (
                  <>
                    <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                    ƒêang ki·ªÉm tra...
                  </>
                ) : (
                  <>
                    <RefreshCw className="w-4 h-4 mr-2" />
                    Ki·ªÉm tra ngay
                  </>
                )}
              </Button>
            </div>
          ) : currentStatus === 'completed' ? (
            <div className="text-center space-y-4">
              <CheckCircle className="w-12 h-12 text-green-500 mx-auto" />
              <div>
                <h3 className="font-medium text-green-700">Thanh to√°n th√†nh c√¥ng!</h3>
                <p className="text-sm text-gray-600 mt-1">
                  T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c g·ª≠i v·ªÅ email c·ªßa b·∫°n
                </p>
              </div>
            </div>
          ) : (
            <div className="text-center space-y-4">
              <AlertCircle className="w-12 h-12 text-red-500 mx-auto" />
              <div>
                <h3 className="font-medium text-red-700">Thanh to√°n th·∫•t b·∫°i</h3>
                <p className="text-sm text-gray-600 mt-1">
                  Vui l√≤ng li√™n h·ªá h·ªó tr·ª£ ƒë·ªÉ ƒë∆∞·ª£c tr·ª£ gi√∫p
                </p>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default PaymentInstructions;