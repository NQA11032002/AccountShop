"use client";

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { ArrowLeft, Star, ShoppingCart, Shield, Clock, Users, Heart, MessageCircle, ThumbsUp, CreditCard, Check, Zap } from 'lucide-react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import ProductFeatures from './ProductFeatures';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Textarea } from '@/components/ui/textarea';
import { useCart } from '@/contexts/CartContext';
import { useAuth } from '@/contexts/AuthContext';
import { useFavorites } from '@/contexts/FavoritesContext';
import { useToast } from '@/hooks/use-toast';
import { formatPrice, calculateSavings, createCartItem } from '@/lib/utils';
import { fetchProductById } from '@/lib/api';
import { Review } from '@/types/reviews.interface';
import { fetchReviews, postReview } from '@/lib/api';
import { addToCart } from '@/lib/api';
import DOMPurify from 'dompurify';

// interface Review {
//   id: number;
//   productId: number;
//   userId: string;
//   userName: string;
//   userAvatar: string;
//   rating: number;
//   comment: string;
//   date: string;
//   helpful: number;
// }
// export async function generateStaticParams() {
//   const productIds = ["1", "2", "3", "4", "5", "6"]; // ho·∫∑c l·∫•y t·ª´ DB/API trong build-time

//   return productIds.map((id) => ({ id }));
// }

export default function ProductDetailPage() {
  const params = useParams();
  const router = useRouter();
  const { addItem } = useCart();
  const { user } = useAuth();
  const { addToFavorites, removeFromFavorites, isFavorite } = useFavorites();
  const { toast } = useToast();

  const [product, setProduct] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [selectedDuration, setSelectedDuration] = useState<number | null>(null);
  const [reviews, setReviews] = useState<Review[]>([]);
  const [newReview, setNewReview] = useState({ rating: 5, comment: '' });
  const [isSubmittingReview, setIsSubmittingReview] = useState(false);
  const { sessionId } = useAuth();
  const productId = parseInt(params.id as string);

  // Get product from centralized data

  const selectedPrice = Array.isArray(product?.durations)
    ? product.durations.find((d: any) => d.id === selectedDuration)
    : null;

  const getCategoryLabel = (cat: any): string => {
    if (!cat) return '';
    if (typeof cat === 'object') return cat.name ?? '';
    return String(cat);
  };

  const categoryLabel = getCategoryLabel(product?.category);

  //hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m
  useEffect(() => {
    const loadProduct = async () => {
      try {
        const data = await fetchProductById(productId);
        setProduct(data);
        if (data.durations?.length) {
          setSelectedDuration(data.durations[0].id);
        }
      } catch (error) {
        console.error('Failed to load product', error);
      } finally {
        setLoading(false);
      }
    };
    loadProduct();
  }, [productId]);

  //hi·ªÉn th·ªã danh s√°ch review product
  useEffect(() => {
    const loadReviews = async () => {
      try {
        const data = await fetchReviews(productId);
        setReviews(data);
      } catch (error) {
        console.error('Failed to fetch reviews:', error);
      }
    };
    loadReviews();
  }, [productId]);


  const handleAddToCart = async () => {
    if (!user || !sessionId) {
      toast({
        title: "C·∫ßn ƒëƒÉng nh·∫≠p",
        description: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.",
        variant: "destructive",
      });
      router.push('/login');
      return;
    }

    if (!product || !selectedPrice) return;

    try {
      const cartItem = createCartItem(product, selectedPrice, user.id);

      // // üü¢ G·ªçi API th√™m v√†o gi·ªè
      // const addedItem = await addToCart(cartItem, sessionId);

      // üü¢ C·∫≠p nh·∫≠t state context gi·ªè h√†ng
      addItem(cartItem);

      toast({
        title: "ƒê√£ th√™m v√†o gi·ªè h√†ng!",
        description: `${product.name} (${selectedPrice.name}) ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng.`,
      });
    } catch (error) {
      toast({
        title: "L·ªói khi th√™m v√†o gi·ªè h√†ng",
        description: "Vui l√≤ng th·ª≠ l·∫°i sau.",
        variant: "destructive",
      });
      console.error(error);
    }
  };
  const handleBuyNow = async () => {

    if (!sessionId || !user) {
      toast({
        title: 'Phi√™n h·∫øt h·∫°n',
        description: 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.',
        variant: 'destructive',
      });
      return
    }

    if (!product || !selectedPrice) return;

    try {
      const cartItem = createCartItem(product, selectedPrice, user.id);

      // üü¢ G·ªçi API th√™m v√†o gi·ªè
      // const addedItem = await addToCart(cartItem, sessionId);

      // üü¢ C·∫≠p nh·∫≠t state context gi·ªè h√†ng
      // sessionStorage.setItem('qai-store-buy-now-item', JSON.stringify(cartItem));
      addItem(cartItem);


      toast({
        title: "Chuy·ªÉn ƒë·∫øn thanh to√°n",
        description: `ƒêang x·ª≠ l√Ω ${product.name} - ${selectedPrice.name}`,
      });

      router.push('/checkout?mode=buynow');

    } catch (error) {
      toast({
        title: "L·ªói khi th√™m v√†o gi·ªè h√†ng",
        description: "Vui l√≤ng th·ª≠ l·∫°i sau.",
        variant: "destructive",
      });
      console.error(error);
    };
  }


  const handleToggleFavorite = () => {
    if (!user) {
      toast({
        title: "C·∫ßn ƒëƒÉng nh·∫≠p",
        description: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o danh s√°ch y√™u th√≠ch.",
        variant: "destructive",
      });
      return;
    }

    if (!product || !selectedPrice) return;

    if (isFavorite(product.id)) {
      removeFromFavorites(product.id, product.name);
      toast({
        title: "ƒê√£ x√≥a kh·ªèi y√™u th√≠ch",
        description: `${product.name} ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch y√™u th√≠ch.`,
      });
    } else {
      addToFavorites(product.id, product.name);
      toast({
        title: "ƒê√£ th√™m v√†o y√™u th√≠ch!",
        description: `${product.name} ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch y√™u th√≠ch.`,
      });
    }
  };

  const getFeatureDescription = (feature: string): string => {
    const descriptions: { [key: string]: string } = {
      'Unlimited movies': 'Xem phim kh√¥ng gi·ªõi h·∫°n v·ªõi ch·∫•t l∆∞·ª£ng 4K',
      'Multiple devices': 'S·ª≠ d·ª•ng tr√™n nhi·ªÅu thi·∫øt b·ªã c√πng l√∫c',
      'Offline downloads': 'T·∫£i v·ªÅ xem offline m·ªçi l√∫c m·ªçi n∆°i',
      'No ads': 'Kh√¥ng c√≥ qu·∫£ng c√°o l√†m gi√°n ƒëo·∫°n',
      'Premium music': 'Nh·∫°c ch·∫•t l∆∞·ª£ng cao, playlist kh√¥ng gi·ªõi h·∫°n',
      'AI features': 'T√≠nh nƒÉng AI ti√™n ti·∫øn v√† th√¥ng minh',
      'Cloud sync': 'ƒê·ªìng b·ªô d·ªØ li·ªáu tr√™n cloud an to√†n',
      'Template premium': 'H√†ng ngh√¨n template chuy√™n nghi·ªáp',
      'X√≥a ph√¥ng': 'C√¥ng c·ª• x√≥a ph√¥ng t·ª± ƒë·ªông b·∫±ng AI',
      'Magic Resize': 'Thay ƒë·ªïi k√≠ch th∆∞·ªõc thi·∫øt k·∫ø t·ª± ƒë·ªông',
      'Brand Kit': 'B·ªô c√¥ng c·ª• qu·∫£n l√Ω th∆∞∆°ng hi·ªáu',
      'T·∫•t c·∫£ ·ª©ng d·ª•ng': 'Truy c·∫≠p t·∫•t c·∫£ ph·∫ßn m·ªÅm Adobe',
      'Cloud storage': 'L∆∞u tr·ªØ ƒë√°m m√¢y 100GB',
      'Font premium': 'H√†ng ngh√¨n font ch·ªØ ƒë·∫πp',
      'Stock photos': 'Th∆∞ vi·ªán ·∫£nh stock mi·ªÖn ph√≠'
    };
    return descriptions[feature] || 'T√≠nh nƒÉng premium ch·∫•t l∆∞·ª£ng cao';
  };

  const handleSubmitReview = async () => {
    if (!user) {
      toast({
        title: "C·∫ßn ƒëƒÉng nh·∫≠p",
        description: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√° s·∫£n ph·∫©m.",
        variant: "destructive",
      });
      return;
    }

    if (!newReview.comment.trim()) {
      toast({
        title: "L·ªói",
        description: "Vui l√≤ng nh·∫≠p n·ªôi dung ƒë√°nh gi√°.",
        variant: "destructive",
      });
      return;
    }

    setIsSubmittingReview(true);

    try {
      const reviewData = {
        user_id: user.id,
        user_name: user.name,
        user_avatar: user.avatar || `https://ui-avatars.com/api/?name=${encodeURIComponent(user.name)}`,
        rating: newReview.rating,
        comment: newReview.comment,
        product_id: product.id,
      };

      const newPostedReview = await postReview(productId, reviewData);
      setReviews(prev => [newPostedReview, ...prev]);
      setNewReview({ rating: 5, comment: '' });

      toast({
        title: "ƒê√°nh gi√° th√†nh c√¥ng!",
        description: "C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√° s·∫£n ph·∫©m.",
      });
    } catch (error) {
      console.error('L·ªói khi g·ª≠i ƒë√°nh gi√°:', error);
      toast({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√°.",
        variant: "destructive",
      });
    } finally {
      setIsSubmittingReview(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center text-gray-500">
        ƒêang t·∫£i s·∫£n ph·∫©m...
      </div>
    );
  }

  if (!product) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m</h2>
          <Button onClick={() => router.push('/products')}>
            <ArrowLeft className="w-4 h-4 mr-2" />
            Quay l·∫°i danh s√°ch s·∫£n ph·∫©m
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-brand-blue/5 via-brand-purple/5 to-brand-emerald/5">
      <Header />

      {/* Breadcrumb */}
      <div className="bg-gray-50 border-b border-gray-200 pt-20">
        <div className="container-max section-padding py-3">
          <nav className="flex items-center space-x-2 text-sm text-gray-600">
            <button
              onClick={() => router.push('/')}
              className="hover:text-brand-blue transition-colors"
            >
              Trang ch·ªß
            </button>
            <span>‚Ä∫</span>
            <button
              onClick={() => router.push(`/products?category=${encodeURIComponent(categoryLabel)}`)}
              className="hover:text-brand-blue transition-colors"
            >
              {categoryLabel === 'Streaming' && 'Gi·∫£i tr√≠ & Streaming'}
              {categoryLabel === 'Music' && '√Çm nh·∫°c'}
              {categoryLabel === 'AI Tools' && 'C√¥ng c·ª• AI'}
              {categoryLabel === 'Design' && 'Thi·∫øt k·∫ø & S√°ng t·∫°o'}
              {categoryLabel === 'Productivity' && 'NƒÉng su·∫•t & C√¥ng vi·ªác'}
              {!['Streaming', 'Music', 'AI Tools', 'Design', 'Productivity'].includes(categoryLabel) && 'S·∫£n ph·∫©m'}
            </button>
            <span>‚Ä∫</span>
            <span className="text-gray-800 font-medium">
              {product.name}
            </span>
          </nav>
        </div>
      </div>

      <div className="container-max section-padding py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          {/* Product Images */}
          <div className="space-y-4">
            <Card className="overflow-hidden p-10">
              <div
                className="h-96 flex items-center justify-center relative"
                style={{ backgroundColor: product.color }}
              >
                <img className='text-8xl h-1/2 w-1/2 object-contain' src={`https://www.taikhoangpremium.shop/images/products/${product.image}`}></img>
              </div>
            </Card>
          </div>

          {/* Product Info */}
          <div className="space-y-6">
            <div>
              <Badge variant="secondary" className="mb-3">{categoryLabel}</Badge>
              <h1 className="text-3xl font-bold text-brand-charcoal mb-2">{product.name}</h1>
              <div className="flex items-center space-x-4 mb-4">
                <div className="flex items-center space-x-1">
                  <Star className="w-5 h-5 fill-yellow-400 text-yellow-400" />
                  <span className="font-medium">{product.rating}</span>
                  <span className="text-gray-500">({product.reviews_count} ƒë√°nh gi√°)</span>
                </div>
                <Badge className="bg-green-500 text-white">
                  C√≥ s·∫µn
                </Badge>
              </div>
              {/* <p className="text-gray-600 text-lg leading-relaxed mb-4"></p> */}



              {/* Key Benefits */}
              {/* <div className="bg-gradient-to-r from-blue-50 to-purple-50 p-4 rounded-lg border border-blue-100">
                <h3 className="font-semibold text-brand-charcoal mb-2">‚ú® ƒêi·ªÉm n·ªïi b·∫≠t:</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-brand-emerald rounded-full"></div>
                    <span className="text-sm text-gray-700">Giao h√†ng t·ª©c th√¨ 24/7</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-brand-emerald rounded-full"></div>
                    <span className="text-sm text-gray-700">B·∫£o h√†nh {product.warranty}</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-brand-emerald rounded-full"></div>
                    <span className="text-sm text-gray-700">H·ªó tr·ª£ k·ªπ thu·∫≠t mi·ªÖn ph√≠</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-brand-emerald rounded-full"></div>
                    <span className="text-sm text-gray-700">ƒê·ªïi tr·∫£ trong 7 ng√†y</span>
                  </div>
                </div>
              </div> */}
            </div>

            {/* Duration Selection */}
            <div>
              <h3 className="font-semibold text-brand-charcoal mb-3">Ch·ªçn th·ªùi h·∫°n:</h3>
              <div className="grid grid-cols-2 gap-3">
                {Array.isArray(product.durations) && product.durations.map((duration: any) => (
                  <button
                    key={duration.id}
                    onClick={() => setSelectedDuration(duration.id)}
                    className={`p-4 rounded-lg border-2 transition-all duration-200 text-left ${selectedDuration === duration.id
                      ? 'border-brand-blue bg-brand-blue/5 text-brand-blue'
                      : 'border-gray-200 hover:border-gray-300'
                      }`}
                  >
                    <div className="font-medium">{duration.name}</div>
                    <div className="text-lg font-bold text-brand-emerald">
                      {formatPrice(duration.price)}
                    </div>
                  </button>
                ))}
              </div>
            </div>

            {/* Pricing */}
            <div className="bg-gradient-to-r from-brand-emerald/10 to-brand-blue/10 p-6 rounded-lg">
              <div className="flex items-center justify-between mb-4">
                <div>
                  <span className="text-3xl font-bold text-brand-emerald">
                    {formatPrice(selectedPrice?.price || 0)}
                  </span>
                  {selectedPrice?.originalPrice && (
                    <span className="text-gray-500 line-through ml-3">
                      {formatPrice(selectedPrice.originalPrice)}
                    </span>
                  )}
                </div>
                {selectedPrice?.originalPrice && (
                  <Badge className="bg-red-500 text-white">
                    Ti·∫øt ki·ªám {calculateSavings(selectedPrice.originalPrice, selectedPrice.price)}%
                  </Badge>
                )}
              </div>

              <div className="space-y-3">
                <Button
                  onClick={handleBuyNow}
                  className="w-full bg-gradient-to-r from-brand-emerald to-brand-blue hover:from-brand-emerald/90 hover:to-brand-blue/90 text-white h-12 text-lg font-semibold"
                >
                  <CreditCard className="w-5 h-5 mr-2" />
                  Mua ngay - {formatPrice(selectedPrice?.price || 0)}
                </Button>

                <div className="flex space-x-3">
                  <Button
                    onClick={handleAddToCart}
                    variant="outline"
                    className="flex-1 h-12 border-brand-blue text-brand-blue hover:bg-brand-blue hover:text-white"
                  >
                    <ShoppingCart className="w-5 h-5 mr-2" />
                    Th√™m v√†o gi·ªè h√†ng
                  </Button>
                  <Button
                    variant="outline"
                    onClick={handleToggleFavorite}
                    className={`h-12 px-4 ${isFavorite(product.id)
                      ? 'bg-red-50 border-red-200 text-red-600 hover:bg-red-100'
                      : 'hover:bg-gray-50'
                      }`}
                  >
                    <Heart className={`w-5 h-5 ${isFavorite(product.id) ? 'fill-current' : ''}`} />
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Tabs */}
        <Tabs defaultValue="features" className="w-full">
          <TabsList className="grid w-full grid-cols-3 bg-gray-100">
            <TabsTrigger value="features">Chi ti·∫øt t√≠nh nƒÉng</TabsTrigger>
            <TabsTrigger value="reviews">ƒê√°nh gi√° ({reviews.length})</TabsTrigger>
            <TabsTrigger value="warranty">Ch√≠nh s√°ch</TabsTrigger>
          </TabsList>

          <TabsContent value="features" className="mt-6">
            <Card className="shadow-lg border-0 bg-gradient-to-br from-white to-blue-50/30">
              <CardHeader className="bg-gradient-to-r from-brand-purple/10 to-brand-blue/10 border-b">
                <CardTitle className="text-2xl font-bold bg-gradient-to-r from-brand-purple to-brand-blue bg-clip-text text-transparent flex items-center">
                  üî• T√≠nh nƒÉng to√†n di·ªán
                </CardTitle>
                <p className="text-gray-600 mt-2">Kh√°m ph√° t·∫•t c·∫£ nh·ªØng g√¨ b·∫°n nh·∫≠n ƒë∆∞·ª£c v·ªõi s·∫£n ph·∫©m n√†y</p>
              </CardHeader>
              <CardContent className="p-8 space-y-8">
                {/* What's Included */}
                <div className="bg-gradient-to-br from-green-50 to-emerald-50 p-6 rounded-xl border border-green-100 shadow-sm">
                  <div className="flex items-center mb-6">
                    <div className="w-12 h-12 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mr-4 shadow-lg">
                      <span className="text-white text-xl">üì¶</span>
                    </div>
                    <h3 className="text-xl font-bold text-gray-800">Th√¥ng tin s·∫£n ph·∫©m</h3>
                  </div>
                  <div
                    className="text-gray-600 text-lg leading-relaxed mb-4"
                    dangerouslySetInnerHTML={{
                      __html: DOMPurify.sanitize(product.description),
                    }}
                  />
                  {/* <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {Array.isArray(product.product_features) && product.product_features.map((feature: any, index: number) => (
                      <div key={index} className="flex items-center space-x-3 p-4 bg-white/70 backdrop-blur-sm rounded-lg border border-green-200/50 hover:shadow-md transition-shadow">
                        <div className="w-8 h-8 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center flex-shrink-0 shadow-sm">
                          <Check className="w-5 h-5 text-white" />
                        </div>
                        <span className="font-medium text-gray-800">{feature.feature}</span>
                      </div>
                    ))}
                  </div> */}
                </div>

                {/* System Requirements */}
                {/* <div className="bg-gradient-to-br from-blue-50 to-indigo-50 p-6 rounded-xl border border-blue-100 shadow-sm">
                  <div className="flex items-center mb-6">
                    <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-full flex items-center justify-center mr-4 shadow-lg">
                      <span className="text-white text-xl">‚öôÔ∏è</span>
                    </div>
                    <h3 className="text-xl font-bold text-gray-800">Y√™u c·∫ßu h·ªá th·ªëng</h3>
                  </div>
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <div className="bg-white/70 backdrop-blur-sm p-5 rounded-lg border border-blue-200/50 hover:shadow-md transition-shadow">
                      <h4 className="font-semibold text-gray-800 mb-4 flex items-center">
                        <span className="w-2 h-2 bg-blue-500 rounded-full mr-2"></span>
                        Thi·∫øt b·ªã ƒë∆∞·ª£c h·ªó tr·ª£
                      </h4>
                      <ul className="space-y-2 text-gray-700">
                        <li className="flex items-center space-x-2">
                          <div className="w-1.5 h-1.5 bg-blue-400 rounded-full"></div>
                          <span>Windows 10/11, macOS 10.15+</span>
                        </li>
                        <li className="flex items-center space-x-2">
                          <div className="w-1.5 h-1.5 bg-blue-400 rounded-full"></div>
                          <span>iOS 13+, Android 8.0+</span>
                        </li>
                        <li className="flex items-center space-x-2">
                          <div className="w-1.5 h-1.5 bg-blue-400 rounded-full"></div>
                          <span>Smart TV, Gaming Console</span>
                        </li>
                        <li className="flex items-center space-x-2">
                          <div className="w-1.5 h-1.5 bg-blue-400 rounded-full"></div>
                          <span>Web Browser (Chrome, Safari, Firefox)</span>
                        </li>
                      </ul>
                    </div>
                    <div className="bg-white/70 backdrop-blur-sm p-5 rounded-lg border border-blue-200/50 hover:shadow-md transition-shadow">
                      <h4 className="font-semibold text-gray-800 mb-4 flex items-center">
                        <span className="w-2 h-2 bg-indigo-500 rounded-full mr-2"></span>
                        K·∫øt n·ªëi internet
                      </h4>
                      <ul className="space-y-2 text-gray-700">
                        <li className="flex items-center space-x-2">
                          <div className="w-1.5 h-1.5 bg-indigo-400 rounded-full"></div>
                          <span>T·ªëi thi·ªÉu: 5 Mbps</span>
                        </li>
                        <li className="flex items-center space-x-2">
                          <div className="w-1.5 h-1.5 bg-indigo-400 rounded-full"></div>
                          <span>ƒê·ªÅ xu·∫•t: 25 Mbps (4K)</span>
                        </li>
                        <li className="flex items-center space-x-2">
                          <div className="w-1.5 h-1.5 bg-indigo-400 rounded-full"></div>
                          <span>·ªîn ƒë·ªãnh cho streaming</span>
                        </li>
                        <li className="flex items-center space-x-2">
                          <div className="w-1.5 h-1.5 bg-indigo-400 rounded-full"></div>
                          <span>H·ªó tr·ª£ wifi & di ƒë·ªông</span>
                        </li>
                      </ul>
                    </div>
                  </div>
                </div> */}

                {/* Usage Guide */}
                <div className="bg-gradient-to-br from-purple-50 to-pink-50 p-6 rounded-xl border border-purple-100 shadow-sm">
                  <div className="flex items-center mb-6">
                    <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center mr-4 shadow-lg">
                      <span className="text-white text-xl">üìã</span>
                    </div>
                    <h3 className="text-xl font-bold text-gray-800">H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h3>
                  </div>
                  <div className="space-y-4">
                    <div className="flex items-start space-x-4 bg-white/70 backdrop-blur-sm p-5 rounded-lg border border-purple-200/50 hover:shadow-md transition-all duration-300 hover:scale-[1.02]">
                      <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-white font-bold text-lg shadow-lg flex-shrink-0">1</div>
                      <div>
                        <div className="font-semibold text-gray-800 text-lg mb-2">Nh·∫≠n th√¥ng tin t√†i kho·∫£n</div>
                        <div className="text-gray-600">Sau khi thanh to√°n th√†nh c√¥ng, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c t√†i kho·∫£n ch·ª©a ƒë·∫ßy ƒë·ªß th√¥ng tin ƒëƒÉng nh·∫≠p v√† h∆∞·ªõng d·∫´n chi ti·∫øt</div>
                      </div>
                    </div>
                    <div className="flex items-start space-x-4 bg-white/70 backdrop-blur-sm p-5 rounded-lg border border-purple-200/50 hover:shadow-md transition-all duration-300 hover:scale-[1.02]">
                      <div className="w-10 h-10 bg-gradient-to-r from-green-500 to-green-600 rounded-full flex items-center justify-center text-white font-bold text-lg shadow-lg flex-shrink-0">2</div>
                      <div>
                        <div className="font-semibold text-gray-800 text-lg mb-2">ƒêƒÉng nh·∫≠p v√† k√≠ch ho·∫°t</div>
                        <div className="text-gray-600">S·ª≠ d·ª•ng th√¥ng tin ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ ƒëƒÉng nh·∫≠p v√†o d·ªãch v·ª• v√† b·∫Øt ƒë·∫ßu tr·∫£i nghi·ªám ngay l·∫≠p t·ª©c</div>
                      </div>
                    </div>
                    <div className="flex items-start space-x-4 bg-white/70 backdrop-blur-sm p-5 rounded-lg border border-purple-200/50 hover:shadow-md transition-all duration-300 hover:scale-[1.02]">
                      <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-lg shadow-lg flex-shrink-0">3</div>
                      <div>
                        <div className="font-semibold text-gray-800 text-lg mb-2">H·ªó tr·ª£ 24/7</div>
                        <div className="text-gray-600">ƒê·ªôi ng≈© h·ªó tr·ª£ chuy√™n nghi·ªáp lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n qua Fanpage v√† Zalo m·ªçi l√∫c trong ng√†y</div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Additional Benefits */}
                <div className="bg-gradient-to-br from-amber-50 to-orange-50 p-6 rounded-xl border border-amber-100 shadow-sm">
                  <div className="flex items-center mb-6">
                    <div className="w-12 h-12 bg-gradient-to-r from-amber-500 to-orange-500 rounded-full flex items-center justify-center mr-4 shadow-lg">
                      <span className="text-white text-xl">‚ú®</span>
                    </div>
                    <h3 className="text-xl font-bold text-gray-800">L·ª£i √≠ch ƒë·∫∑c bi·ªát</h3>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="text-center p-4 bg-white/70 backdrop-blur-sm rounded-lg border border-amber-200/50 hover:shadow-md transition-shadow">
                      <div className="w-12 h-12 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-3 shadow-lg">
                        <Shield className="w-6 h-6 text-white" />
                      </div>
                      <h4 className="font-semibold text-gray-800 mb-2">B·∫£o m·∫≠t cao</h4>
                      <p className="text-sm text-gray-600">T√†i kho·∫£n ƒë∆∞·ª£c m·∫≠t tuy·ªát ƒë·ªëi</p>
                    </div>
                    <div className="text-center p-4 bg-white/70 backdrop-blur-sm rounded-lg border border-amber-200/50 hover:shadow-md transition-shadow">
                      <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-full flex items-center justify-center mx-auto mb-3 shadow-lg">
                        <Zap className="w-6 h-6 text-white" />
                      </div>
                      <h4 className="font-semibold text-gray-800 mb-2">T·ªëc ƒë·ªô cao</h4>
                      <p className="text-sm text-gray-600">Tr·∫£i nghi·ªám m∆∞·ª£t m√† v·ªõi t·ªëc ƒë·ªô t·∫£i nhanh ch√≥ng</p>
                    </div>
                    <div className="text-center p-4 bg-white/70 backdrop-blur-sm rounded-lg border border-amber-200/50 hover:shadow-md transition-shadow">
                      <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-3 shadow-lg">
                        <Heart className="w-6 h-6 text-white" />
                      </div>
                      <h4 className="font-semibold text-gray-800 mb-2">H·ªó tr·ª£ t·∫≠n t√¨nh</h4>
                      <p className="text-sm text-gray-600">ƒê·ªôi ng≈© h·ªó tr·ª£ nhi·ªát t√¨nh, chuy√™n nghi·ªáp 24/7</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="reviews" className="mt-6">
            <div className="space-y-6">
              {/* Add Review */}
              {user && (
                <Card>
                  <CardHeader>
                    <CardTitle>Vi·∫øt ƒë√°nh gi√°</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium mb-2">ƒê√°nh gi√° c·ªßa b·∫°n</label>
                      <div className="flex space-x-1">
                        {[1, 2, 3, 4, 5].map((star) => (
                          <button
                            key={star}
                            onClick={() => setNewReview(prev => ({ ...prev, rating: star }))}
                            className="p-1"
                          >
                            <Star
                              className={`w-6 h-6 ${star <= newReview.rating
                                ? 'fill-yellow-400 text-yellow-400'
                                : 'text-gray-300'
                                }`}
                            />
                          </button>
                        ))}
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-2">N·ªôi dung ƒë√°nh gi√°</label>
                      <Textarea
                        value={newReview.comment}
                        onChange={(e) => setNewReview(prev => ({ ...prev, comment: e.target.value }))}
                        placeholder="Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n v·ªÅ s·∫£n ph·∫©m n√†y..."
                        rows={4}
                      />
                    </div>
                    <Button
                      onClick={handleSubmitReview}
                      disabled={isSubmittingReview}
                      className="w-full bg-gradient-to-r from-brand-emerald to-brand-blue hover:from-brand-emerald/90 hover:to-brand-blue/90 text-white h-12 text-lg font-semibold"
                    >
                      {isSubmittingReview ? 'ƒêang g·ª≠i...' : 'G·ª≠i ƒë√°nh gi√°'}
                    </Button>
                  </CardContent>
                </Card>
              )}

              {/* Reviews List */}
              <div className="space-y-4">
                {reviews.map((review) => (
                  <Card key={review.id}>
                    <CardContent className="p-6">
                      <div className="flex items-start space-x-4">
                        <Avatar>
                          <AvatarImage src={review.user_avatar} alt={review.user_name} />
                          <AvatarFallback>{review.user_name?.charAt(0) || '?'}</AvatarFallback>
                        </Avatar>
                        <div className="flex-1">
                          <div className="flex items-center justify-between mb-2">
                            <div>
                              <h4 className="font-medium">{review.user_name}</h4>
                              <div className="flex items-center space-x-2">
                                <div className="flex">
                                  {[1, 2, 3, 4, 5].map((star) => (
                                    <Star
                                      key={star}
                                      className={`w-4 h-4 ${star <= review.rating
                                        ? 'fill-yellow-400 text-yellow-400'
                                        : 'text-gray-300'
                                        }`}
                                    />
                                  ))}
                                </div>
                                <span className="text-sm text-gray-500">{review.date}</span>
                              </div>
                            </div>
                          </div>
                          <p className="text-gray-700 mb-3">{review.comment}</p>
                          <div className="flex items-center space-x-4">
                            <button className="flex items-center space-x-1 text-sm text-gray-500 hover:text-gray-700">
                              <ThumbsUp className="w-4 h-4" />
                              <span>H·ªØu √≠ch ({review.helpful})</span>
                            </button>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="warranty" className="mt-6">
            <Card>
              <CardContent className="p-6">
                <div className="prose max-w-none">

                  <ul className="space-y-2 text-gray-700">
                    <h3 className="text-lg font-semibold">Ch√≠nh s√°ch b·∫£o h√†nh</h3>
                    <li>‚Ä¢ B·∫£o h√†nh ƒë·∫ßy ƒë·ªß th·ªùi gian c·ªßa g√≥i k·ªÉ t·ª´ ng√†y mua</li>
                    <li>‚Ä¢ H·ªó tr·ª£ 24/7 qua Telegram v√† Zalo</li>
                    <li>‚Ä¢ ƒê·ªïi t√†i kho·∫£n m·ªõi ho·∫∑c fix l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ trong th·ªùi gian b·∫£o h√†nh</li>
                    <li>‚Ä¢ Kh√¥ng b·∫£o h√†nh n·∫øu kh√°ch h√†ng vi ph·∫°m ch√≠nh s√°ch c·ªßa g√≥i</li>
                    <h3 className="text-lg font-semibold">H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h3>
                    <li>‚Ä¢ Sau khi nh·∫≠n t√†i kho·∫£n h√£y ki·ªÉm tra ngay l·∫≠p t·ª©c</li>
                    <li>‚Ä¢ N·∫øu c√≥ v·∫•n ƒë·ªÅ b·∫•t th∆∞·ªùng h√£y li√™n h·ªá l·∫°i Shop ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.</li>
                    <li>‚Ä¢ S·ª≠ d·ª•ng & b·∫£o qu·∫£n t√†i kho·∫£n theo ƒë√∫ng quy ƒë·ªãnh</li>
                    <h3 className="text-lg font-semibold ">ƒê·ªëi v·ªõi g√≥i ch√≠nh ch·ªß</h3>
                    <li>‚Ä¢ N√¢ng tr·ª±c ti·∫øp t·ª´ t√†i kho·∫£n Anh/Ch·ªã </li>
                    <li>‚Ä¢ Sau khi n√¢ng c·∫•p h√£y ƒë·ªïi to√†n b·ªô th√¥ng tin, t√†i kho·∫£n s·∫Ω do Anh/Ch·ªã qu·∫£n l√Ω, Shop s·∫Ω kh√¥ng can thi·ªáp v√†o t√†i kho·∫£n </li>
                    <h3 className="text-lg font-semibold ">ƒê·ªëi v·ªõi g√≥i d√πng chung</h3>
                    <li>‚Ä¢ T√†i kho·∫£n Shop c·∫•p ƒë·ªÉ Anh/Ch·ªã truy c·∫≠p v√†o s·ª≠ d·ª•ng</li>
                    <li>‚Ä¢ Kh√¥ng chia s·∫Ω ho·∫∑c b√°n t√†i kho·∫£n cho b·∫•t k·ª≥ ai</li>
                    <li>‚Ä¢ Kh√¥ng thay ƒë·ªïi b·∫•t k·ª≥ th√¥ng tin n√†o </li>
                  </ul>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>

      <Footer />
    </div>
  );
}