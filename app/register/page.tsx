"use client";

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { Eye, EyeOff, Mail, Lock, User, ArrowRight, UserPlus } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Checkbox } from '@/components/ui/checkbox';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';

export default function RegisterPage() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [acceptTerms, setAcceptTerms] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const { register } = useAuth();
  const { toast } = useToast();
  const router = useRouter();


  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Validation
    if (!name || !email || !password || !confirmPassword) {
      toast({
        title: "L·ªói ƒëƒÉng k√Ω",
        description: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ th√¥ng tin.",
        variant: "destructive",
      });
      return;
    }

    if (password !== confirmPassword) {
      toast({
        title: "L·ªói ƒëƒÉng k√Ω",
        description: "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.",
        variant: "destructive",
      });
      return;
    }

    if (password.length < 6) {
      toast({
        title: "L·ªói ƒëƒÉng k√Ω",
        description: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.",
        variant: "destructive",
      });
      return;
    }

    if (!acceptTerms) {
      toast({
        title: "L·ªói ƒëƒÉng k√Ω",
        description: "Vui l√≤ng ch·∫•p nh·∫≠n ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng.",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    try {
      const result = await register(email, password, name);

      if (result.success) {
        toast({
          title: "üéâ ƒêƒÉng k√Ω th√†nh c√¥ng!",
          description: result.message,
        });
      } else {
        toast({
          title: "‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i",
          description: result.message,
          variant: "destructive",
        });
      }
    } catch (e) {
      toast({
        title: "L·ªói kh√¥ng x√°c ƒë·ªãnh",
        description: "Vui l√≤ng th·ª≠ l·∫°i sau.",
        variant: "destructive",
      });
    }

    setIsLoading(false);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-brand-emerald/5 via-brand-blue/5 to-brand-purple/5 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-brand-emerald to-brand-blue rounded-2xl mb-4 shadow-lg">
            <UserPlus className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-3xl font-bold text-brand-charcoal mb-2">ƒêƒÉng k√Ω</h1>
          <p className="text-gray-600">T·∫°o t√†i kho·∫£n m·ªõi t·∫°i QAI STORE</p>
        </div>

        {/* Register Form */}
        <Card className="shadow-xl border-0 bg-white/80 backdrop-blur-sm">
          <CardHeader className="text-center pb-6">
            <CardTitle className="text-xl text-brand-charcoal">T·∫°o t√†i kho·∫£n m·ªõi</CardTitle>
            <CardDescription>
              ƒêi·ªÅn th√¥ng tin ƒë·ªÉ t·∫°o t√†i kho·∫£n QAI STORE
            </CardDescription>
          </CardHeader>

          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Name Field */}
              <div className="space-y-2">
                <Label htmlFor="name" className="text-sm font-medium text-brand-charcoal">
                  H·ªç v√† t√™n
                </Label>
                <div className="relative">
                  <User className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <Input
                    id="name"
                    type="text"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    placeholder="Nguy·ªÖn VƒÉn A"
                    className="pl-10 h-12 border-gray-200 focus:border-brand-emerald focus:ring-brand-emerald/20"
                    required
                  />
                </div>
              </div>

              {/* Email Field */}
              <div className="space-y-2">
                <Label htmlFor="email" className="text-sm font-medium text-brand-charcoal">
                  Email
                </Label>
                <div className="relative">
                  <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <Input
                    id="email"
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="your.email@example.com"
                    className="pl-10 h-12 border-gray-200 focus:border-brand-emerald focus:ring-brand-emerald/20"
                    required
                  />
                </div>
              </div>

              {/* Password Field */}
              <div className="space-y-2">
                <Label htmlFor="password" className="text-sm font-medium text-brand-charcoal">
                  M·∫≠t kh·∫©u
                </Label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <Input
                    id="password"
                    type={showPassword ? "text" : "password"}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    placeholder="√çt nh·∫•t 6 k√Ω t·ª±"
                    className="pl-10 pr-10 h-12 border-gray-200 focus:border-brand-emerald focus:ring-brand-emerald/20"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                  >
                    {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                  </button>
                </div>
              </div>

              {/* Confirm Password Field */}
              <div className="space-y-2">
                <Label htmlFor="confirmPassword" className="text-sm font-medium text-brand-charcoal">
                  X√°c nh·∫≠n m·∫≠t kh·∫©u
                </Label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <Input
                    id="confirmPassword"
                    type={showConfirmPassword ? "text" : "password"}
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                    className="pl-10 pr-10 h-12 border-gray-200 focus:border-brand-emerald focus:ring-brand-emerald/20"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                  >
                    {showConfirmPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                  </button>
                </div>
              </div>

              {/* Terms Checkbox */}
              <div className="flex items-start space-x-2">
                <Checkbox
                  id="terms"
                  checked={acceptTerms}
                  onCheckedChange={(checked) => setAcceptTerms(checked as boolean)}
                  className="mt-1"
                />
                <label htmlFor="terms" className="text-sm text-gray-600 cursor-pointer">
                  T√¥i ƒë·ªìng √Ω v·ªõi{' '}
                  <Link href="#" className="text-brand-emerald hover:text-brand-blue transition-colors">
                    ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng
                  </Link>
                  {' '}v√†{' '}
                  <Link href="#" className="text-brand-emerald hover:text-brand-blue transition-colors">
                    Ch√≠nh s√°ch b·∫£o m·∫≠t
                  </Link>
                </label>
              </div>

              {/* Submit Button */}
              <Button
                type="submit"
                disabled={isLoading}
                className="w-full h-12 bg-gradient-to-r from-brand-emerald to-brand-blue hover:from-brand-emerald/90 hover:to-brand-blue/90 text-white font-medium shadow-lg hover:shadow-xl transition-all duration-300"
              >
                {isLoading ? (
                  <div className="flex items-center space-x-2">
                    <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                    <span>ƒêang t·∫°o t√†i kho·∫£n...</span>
                  </div>
                ) : (
                  <div className="flex items-center space-x-2">
                    <span>T·∫°o t√†i kho·∫£n</span>
                    <ArrowRight className="w-4 h-4" />
                  </div>
                )}
              </Button>
            </form>

            {/* Login Link */}
            <div className="mt-6 text-center">
              <p className="text-gray-600">
                ƒê√£ c√≥ t√†i kho·∫£n?{' '}
                <Link
                  href="/login"
                  className="text-brand-emerald hover:text-brand-blue font-medium transition-colors"
                >
                  ƒêƒÉng nh·∫≠p ngay
                </Link>
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Back to Home */}
        <div className="text-center mt-6">
          <Link
            href="/"
            className="text-gray-600 hover:text-brand-emerald transition-colors text-sm"
          >
            ‚Üê Quay v·ªÅ trang ch·ªß
          </Link>
        </div>
      </div>
    </div>
  );
}